# This example demonstrates pod-based CPU and memory pinning.
# All containers of a pod run in the same CPU/memory pool.
# The capacity of a pool is defined as a number of pods.
#
# You can launch a pod to a pod pool by annotating it:
#
# metadata:
#   annotations:
#     pooltype.podpools.cri-resource-manager.intel.com: singlecpu

policy:
  # pod-based CPU and memory pinning is implemented in the podpools policy.
  Active: podpools

  # AvailableResources specifies CPUs that a policy is allowed to manage.
  # By default AvailableResources contains all CPUs.
  AvailableResources:
    # Here we use 14 CPUs, excluding CPUs #0 and #1 (hyperthreads of core 0)
    CPU: cpuset:2-15

  # ReservedResources specifies CPU(s) that run only kube-system pods.
  ReservedResources:
    # Here we dedicate CPU #15 for these pods.
    # This leaves 13 out of 14 available CPUs unallocated.
    CPU: cpuset:15

  # podpools-specific configuration specifies the following.
  # 1. Available pod pool types.
  #    There can be many pool instances of the same type.
  # 2. How many host CPUs are allocated for each pool type in total.
  #    This can be a number or a percentage of non-reserved CPUs.
  # 3. How many CPUs each pool instance gets from the CPUs of its type.
  #    This can be a number or a percentage of pool type CPUs.
  # 4. Capacity of each pool instance.
  #    This is the maximum number of pods in the same pool instance.
  podpools:
    # By default podpools pins both CPU and memory of all containers.
    # Pinning either of them can be disabled with:
    # pinCPU: false
    # pinMemory: false
    poolTypes:
      # Define the "singlecpu" pod pool type:
      - name: singlecpu
        typeResources:
          # Take 3 out of 13 AvailableResources CPUs to be used by
          # all "singlecpu" pod pool instances in total.
          # This leaves 10 CPUs unallocated.
          cpu: 3
        resources:
          # Every "singlecpu" pod pool instance has 1 CPU to run all
          # pods assigned to this pool.
          # As the type can use 3 CPUs in total, there will be 3
          # "singlecpu" pool instances.
          cpu: 1
        capacity:
          # Every "singlecpu" pod pool instance holds at most 2 pods.
          pod: 2

      # Define the "dualcpu" pod pool type:
      - name: dualcpu
        # fillOrder specifies the order in which the capacity of pod
        # pool instances of this pool type is filled with pods. The
        # default is Balanced: new pod is assigned to a pool instance
        # with most free capacity. The opposite is Packed: new pod is
        # assigned to a pool instance with least free capacity.
        fillOrder: Packed
        typeResources:
          # Take 50 % of AvailableResources CPUs (50 % * 14 = 7)
          # to be used by all "dualcpu" pool instances in total.
          cpu: 50%
        resources:
          # Every "dualcpu" pool instance has 2 CPUs.
          # That is, 7 / 2 = 3 pool instances of this type will be created,
          # and therefore only 6 CPUs actually consumed to this pool type.
          # This leaves 4 CPUs unallocated.
          cpu: 2
        capacity:
          # Every "dualcpu" pool instance holds at most 3 pods.
          pod: 3

      # Available CPUs that are neither reserved nor allocated to any
      # of the pool instances will be "shared" CPUs. Pods that are not
      # kube-system and are not assigned to any of the pools will run
      # on the shared CPUs.
logger:
  Debug: podpools
